/*
func main() {
	var a = &1
	var b = a + &2
	var c = &b
	var d = c
	{
		var d = a
		println(d)
	}
	println(b)
}
*/

/*
func main() {
	var a = "hello"
	var b = a + " world"
	println(b)
}
*/

/*
func main() {
	var s = "Mike"
	var a = 1
	println(strfmt"hello ${s}, ${&a}")
}
*/

/*
func add(v1: &u8, v2: &u8) -> u16 {
	var r = v1 + v2
	// println(&r)
	return r
}

func add(v: &u8) -> u16 {
	var r = v + v
	// println(r)
	return r
}

func print() {
	var s = "Mike"
	var a = 1
	{
		println(strfmt"hello ${s}, ${&a}", "xxx")
	}
}

func main() {
	print()
	var v1 = add(&1, &2)
	println(strfmt"r: ${v1}")
	println(v1)
	/*
	var s = "Mike"
	var a = 1
	println(strfmt"hello ${s}, ${&a}")
	*/
}
*/

/*
func add(v1: &u8, v2: &u8) -> u16 {
	var r = v1 + v2
	// println(&r)
	return r
}

func print() {
	println("1")
	return
	println("2")
}

func main() {
	println(add(&1, &2))
	var s = "Mike"
	var a = &1
	println(s, a)
	print()
}
*/

/*
func add(v1: &u8, v2: &u8) -> &u8 {
	return v1
}

func main() {
	var a = 1
	var b = 2
	println(add(&a, &b))
}
*/

/*
func add(v1: &u8, v2: &u8) -> u16 {
	var r = v1 + v2
	// println(&r)
	return r
}

func main() {
	add(&1, &2)
}
*/

/*
func add(v1: &u8) -> &u8 {
	return v1
}
*/

/*
func add1(v1: &u8, v2: &u8) -> u16 {
	{
		{
			return v1 + v2
		}
	}
}

func add2(v1: &u8, v2: &u8, v3: u8) -> &u8 {
	{
		{
			return v2
		}
	}
	println("xxx")
}
func add2(v1: &u8, v2: u8, v3: &u8, v4: u8) -> &u8 {
	{
		{
			return v3
		}
	}
	println("xxx")
}

func add2(v1: &u8) -> &u8 {
	{
		{
			return v1
		}
	}
}

func add3(v1: u8) -> u8 {
	return v1
}
*/

/*
func add4(v: &u8) -> &u8 {
	{
		return v
	}
}

func add5(v1: &u8) -> &u8 {
	var v = v1
	{
		return add4(v)
	}
}
*/

/*
func add6(v2: &u8) -> &u8 {
	{
		return add5(v2)
	}
}

func add7(v: u8) -> u8 {
	{
		return v
	}
}

func add8(v: u8) -> u8 {
	{
		return add7(v)
	}
}

func add9(v: u8) -> u8 {
	{
		return add8(v)
	}
}

func add10(v1: &u8, v2: ...&u8) -> &u8 {
	return v2...[2]
	// return v1
}

func add11(v1: ...&u8) -> &u8 {
	return v1...[2]
	// return v1
}
*/

/*
*/
struct DateTime {
	year: u16,
	month: u8,
	day: u8
}

struct Cert {
	no: &string,
	create_time: DateTime
} 
struct UserInfo {
	name: &string,
	age: u8,
	cert: Cert
}

/*
*/
struct Test1 {
	f1: string
}

struct Test2 {
	f2: Test1
}

struct Test3 {
	f3: Test2
}

func struct_call_move(user_info: UserInfo) {
	{
		var cert = &user_info.cert
		{
			println(cert.no)
			println("name:", user_info.name)
			println(user_info.cert.create_time.year)
		}
	}
	// println(user_info.cert.create_time.year)
	// println("age:", user_info.cert.no)
}

func struct_call(user_info: &UserInfo) -> &Cert {
	{
		var cert = &user_info.cert
		{
			println(cert.no)
			println("name:", user_info.name)
			println(user_info.cert.create_time.year)
		}
		return cert
	}
	// println(user_info.cert.create_time.year)
	// println("age:", user_info.cert.no)
}
/*
*/

func test1() {
	/*
	Cert {
		no: "123456",
		create_time: DateTime{
			month: 12,
			year: 2020,
			day: 12
		}
	}
	*/
	var a = 1
	var user_info = UserInfo{
		name: "Mike",
		cert: Cert {
			no: "123456",
			create_time: DateTime{
				month: 12,
				year: 2020,
				day: 12
			}
		},
		age: 20
	}
	/*
	println("name:", user_info.name)
	println("cert no:", user_info.cert.no)
	println("create year:", &user_info.cert.create_time.year)
	println("create year:", &user_info.cert.create_time.year)
	println("create year:", &user_info.cert.create_time.year)
	*/
	var cert = struct_call(&user_info)
	println(&cert.create_time.day)
	// println("create month:", user_info.cert.create_time.month)
	// println("create day:", user_info.cert.create_time.day)
	// user_info.name
	/*
	Test3{
		f3: Test2{
			f2: Test1{
				f1: "xxx"
			}
		}
	}
	*/
}

func test2() {
	var user_info = UserInfo{
		name: "Mike",
		cert: Cert {
			no: "123456",
			create_time: DateTime{
				month: 12,
				year: 2020,
				day: 12
			}
		},
		age: 20
	}
	struct_call_move(user_info)
}

/*
func [this: &UserInfo] get_cert() -> &Cert {
	return &this.cert
}

func [self: &UserInfo] print() {
	println("user into obejct ref")
}

func [self: UserInfo] print() {
	println("user info object move")
}

func test_struct_member_call() {
	var user_info = UserInfo {
		name: "Mike",
		cert: Cert {
			no: "123456",
			create_time: DateTime{
				month: 12,
				year: 2020,
				day: 12
			}
		},
		age: 20
	}
	var cert = user_info.&get_cert()
	println(cert.no)
	user_info.&print()
	user_info.print()
}

struct Test1 {
}

func [self: &Test1] print() {
	println("Test1 obejct ref")
}

func [self: Test1] print() {
	println("Test1 object move")
}

func test2() {
	var obj = Test1 {
	}

	obj.&print()
	obj.print()
}
*/

/*
func f0() {
	println("hello")
}

func f1() {
	f1()
}
*/

/*
func test(v1: u8, v2: u8) {
	println(&v1, &v2)
	// test(v1, v2)
}
*/

/*
func test_if() {
	if true {
		println(&1)
	} else if false {
		println(&2)
	} else if false {
		println(&3)
	} else {
		println(&4)
	}
	println("hello")
}

func test_add(v1: &u8, v2: &u8) -> u16 {
	var r = v1 + v2
	r = 1
	return r
}
*/

import "local:math" as m
import "package:libnet:http"
// use "*"
// module math

func test_assign() {
	var s1 = "hello"
	s1 = "world"
	var v1 = 1
	var v2 = 2
	v1 = 3
	v2 = v1
	println(s1)
	// println(&v1)
	println(&v2)
}

func test_equal_equal() {
	var r = &2 == &1
	println(&r)
	if &1 == &1 {
		println("&1 == &1")
	} else {
		println("&1 != &1")
	}
}

func test_while() {
	var b = &1
	while b == &1 {
		println("test_while condition true")
		++b
	}
	println("test_while")
}

func main() {
	// println(&add1(&1, &2))
	// println(&add2(&1))
	// println(&add2(&1, &2, 3))
	// println(&add2(&1, 2, &3, 4))
	// println(&add3(5))
	// println(&add2(&1, &2))
	// println(add1(&1, &2))
	// println(add(&1, &2))
	// println(&a)
	// println(add(&1))
	// println(add5(&1))
	// println(add6(&1))
	// println(&add9(1))
	// println(add10(&1, &2, &3, &4, &5))
	// println(add11(&1, &2, &3, &4, &5))
	test1()
	test2()
	// test_struct_member_call()
	// test2()
	// f1()
	/*
	var a = 1
	var b = 1
	test(1, 2)
	test(1, 2)
	test(1, 2)
	test(1, 2)
	test_if()
	println(test_add(&1, &2))
	*/
	test_assign()
	test_equal_equal()
	var a = &1
	*a = 2
	println(a)
	m::print()
	http::get()
	test_while()
}

